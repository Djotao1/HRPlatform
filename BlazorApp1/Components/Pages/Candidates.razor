@page "/candidates"
@using HRPlatform.Application.Candidates.DTOs
@using HRPlatform.Web.Blazor.Services
@inject ICandidateApiService CandidateService


<PageTitle>HR Platform - Candidates</PageTitle>

<h3>Job Candidates</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowAddCandidate">Add New Candidate</button>
</div>

<!-- Search Form -->
<div class="card mb-3">
    <div class="card-body">
        <h5 class="card-title">Search Candidates</h5>
        <div class="row">
            <div class="col-md-4">
                <input @bind="searchName" @bind:event="oninput" class="form-control" placeholder="Search by name" />
            </div>
            <div class="col-md-4">
                <input @bind="searchSkill" @bind:event="oninput" class="form-control" placeholder="Search by skill" />
            </div>
            <div class="col-md-4">
                <button class="btn btn-outline-primary" @onclick="SearchCandidates">Search</button>
                <button class="btn btn-outline-secondary" @onclick="ClearSearch">Clear</button>
            </div>
        </div>
    </div>
</div>

<!-- Candidates Table -->
@if (candidates == null)
{
    <p>Loading...</p>
}
else if (!candidates.Any())
{
    <div class="alert alert-info">No candidates found.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Contact</th>
                    <th>Skills</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var candidate in candidates)
                {
                    <tr>
                        <td>@candidate.FullName</td>
                        <td>@candidate.Email</td>
                        <td>@candidate.ContactNumber</td>
                        <td>
                            @if (candidate.Skills != null && candidate.Skills.Any())
                            {
                                @foreach (var skill in candidate.Skills)
                                {
                                    <span class="badge bg-secondary me-1">@skill.Name</span>
                                }
                            }
                            else
                            {
                                <span class="text-muted">No skills</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => EditCandidate(candidate)">Edit</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteCandidate(candidate)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Add/Edit Candidate Modal -->
@if (showModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingCandidate?.Id > 0 ? "Edit Candidate" : "Add Candidate")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@candidateForm" OnValidSubmit="@SaveCandidate">
                        <div class="mb-3">
                            <label for="fullName" class="form-label">Full Name</label>
                            <InputText id="fullName" @bind-Value="candidateForm.FullName" class="form-control" />
                            <ValidationMessage For="@(() => candidateForm.FullName)" />
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" @bind-Value="candidateForm.Email" class="form-control" />
                            <ValidationMessage For="@(() => candidateForm.Email)" />
                        </div>
                        <div class="mb-3">
                            <label for="contactNumber" class="form-label">Contact Number</label>
                            <InputText id="contactNumber" @bind-Value="candidateForm.ContactNumber" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="dateOfBirth" class="form-label">Date of Birth</label>
                            <InputDate id="dateOfBirth" @bind-Value="candidateForm.DateOfBirth" class="form-control" />
                            <ValidationMessage For="@(() => candidateForm.DateOfBirth)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Skills (comma separated)</label>
                            <InputText @bind-Value="skillsInput" class="form-control" placeholder="C# programming, English, Database design" />
                            <small class="form-text text-muted">Enter skills separated by commas</small>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    private List<CandidateDto> candidates = new();
    private bool showModal = false;
    private CreateCandidateRequest candidateForm = new();
    private CandidateDto? editingCandidate;
    private string skillsInput = "";
    private string searchName = "";
    private string searchSkill = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCandidates();
    }

    private async Task LoadCandidates()
    {
        candidates = await CandidateService.GetCandidatesAsync();
    }

    private async Task SearchCandidates()
    {
        var skills = string.IsNullOrEmpty(searchSkill) ? new List<string>() : new List<string> { searchSkill };
        candidates = await CandidateService.SearchCandidatesAsync(searchName, skills);
    }

    private async Task ClearSearch()
    {
        searchName = "";
        searchSkill = "";
        await LoadCandidates();
    }

    private void ShowAddCandidate()
    {
        candidateForm = new CreateCandidateRequest();
        editingCandidate = null;
        skillsInput = "";
        showModal = true;
    }

    private void EditCandidate(CandidateDto candidate)
    {
        candidateForm = new CreateCandidateRequest
        {
            FullName = candidate.FullName,
            Email = candidate.Email,
            ContactNumber = candidate.ContactNumber,
            DateOfBirth = candidate.DateOfBirth,
            Skills = candidate.Skills?.Select(s => s.Name).ToList() ?? new List<string>()
        };
        skillsInput = string.Join(", ", candidateForm.Skills);
        editingCandidate = candidate;
        showModal = true;
    }

    private async Task SaveCandidate()
    {
        // Parse skills from input
        candidateForm.Skills = skillsInput.Split(',')
            .Select(s => s.Trim())
            .Where(s => !string.IsNullOrEmpty(s))
            .ToList();

        try
        {
            if (editingCandidate?.Id > 0)
            {
                var updateRequest = new UpdateCandidateRequest
                {
                    FullName = candidateForm.FullName,
                    ContactNumber = candidateForm.ContactNumber,
                    DateOfBirth = candidateForm.DateOfBirth,
                    Skills = candidateForm.Skills
                };
                await CandidateService.UpdateCandidateAsync(editingCandidate.Id, updateRequest);
            }
            else
            {
                await CandidateService.CreateCandidateAsync(candidateForm);
            }

            CloseModal();
            await LoadCandidates();
        }
        catch (Exception ex)
        {
            // Handle error (could show toast notification)
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task DeleteCandidate(CandidateDto candidate)
    {
        
        
            await CandidateService.DeleteCandidateAsync(candidate.Id);
            await LoadCandidates();
        
    }

    private void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }
}