@page "/skills"
@using HRPlatform.Application.Skills.DTOs
@using HRPlatform.Web.Blazor.Services
@inject ISkillApiService SkillService
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<h3>Skills Management</h3>

<!-- Search Form -->
<div class="card mb-3">
    <div class="card-body">
        <h5 class="card-title">Search Skills</h5>
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">
                        @if (isSearching)
                        {
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Searching...</span>
                            </div>
                        }
                        else
                        {
                            <i class="fas fa-search"></i>
                        }
                    </span>
                    <input value="@searchName"
                           @oninput="OnSearchInput"
                           class="form-control"
                           placeholder="Type to search by skill name..." />
                    @if (!string.IsNullOrEmpty(searchName))
                    {
                        <button class="btn btn-outline-secondary" type="button" @onclick="ClearSearchName">
                            <i class="fas fa-times"></i>
                        </button>
                    }
                </div>
            </div>
            <div class="col-md-6">
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary" @onclick="ClearSearch" title="Clear all filters">
                        <i class="fas fa-undo"></i> Clear
                    </button>
                    <button class="btn btn-outline-primary" @onclick="RefreshSkills" title="Refresh list">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                </div>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(searchName))
        {
            <div class="mt-2">
                <small class="text-muted">
                    Showing skills with name containing "<strong>@searchName</strong>"
                </small>
            </div>
        }
    </div>
</div>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowAddSkill">
        <i class="fas fa-plus"></i> Add New Skill
    </button>
    <span class="ms-2 text-muted">
        @if (skills != null)
        {
            <small>Total: @skills.Count skill(s)</small>
        }
    </span>
</div>

<!-- Skills Table -->
@if (skills == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div class="mt-2">Loading skills...</div>
    </div>
}
else if (!skills.Any())
{
    <div class="alert alert-info text-center">
        <i class="fas fa-info-circle"></i> No skills found.
        @if (!string.IsNullOrEmpty(searchName))
        {
            <div class="mt-1">
                <button class="btn btn-sm btn-outline-primary" @onclick="ClearSearch">
                    Clear filters to see all skills
                </button>
            </div>
        }
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Skill Name</th>
                    <th>Created Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var skill in skills)
                {
                    <tr>
                        <td>@skill.Id</td>
                        <td>
                            <strong>@skill.Name</strong>
                            @if (!string.IsNullOrEmpty(searchName) && skill.Name.Contains(searchName, StringComparison.OrdinalIgnoreCase))
                            {
                                <br />
                    
                                <small class="text-success">✓ Matches your search</small>
                            }
                        </td>
                        <td>@skill.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditSkill(skill)" title="Edit skill">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteSkill(skill)" title="Delete skill">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Add/Edit Skill Modal -->
@if (showModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingSkill?.Id > 0 ? "Edit Skill" : "Add Skill")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@skillForm" OnValidSubmit="@SaveSkill">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label for="skillName" class="form-label">Skill Name *</label>
                            <InputText id="skillName" @bind-Value="skillForm.Name" class="form-control" />
                            <ValidationMessage For="@(() => skillForm.Name)" />
                            @if (!string.IsNullOrEmpty(duplicateError))
                            {
                                <div class="text-danger mt-1">@duplicateError</div>
                            }
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span class="ms-2">Saving...</span>
                                }
                                else
                                {
                                    <span>Save</span>
                                }
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal" disabled="@isLoading">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<SkillDto> skills = new();
    private List<SkillDto> allSkills = new(); // Store all skills for client-side filtering
    private bool showModal = false;
    private CreateSkillRequest skillForm = new();
    private SkillDto? editingSkill;
    private string searchName = "";
    private string errorMessage = "";
    private string duplicateError = "";
    private bool isLoading = false;
    private bool isSearching = false;
    private CancellationTokenSource searchCancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSkills();
    }

    private async Task LoadSkills()
    {
        try
        {
            allSkills = await SkillService.GetSkillsAsync();
            skills = allSkills;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading skills: {ex.Message}";
        }
    }

    private async void OnSearchInput(ChangeEventArgs e)
    {
        searchName = e.Value?.ToString() ?? "";
        await PerformSearch();
    }

    private async Task PerformSearch()
    {
        // Cancel previous search if still running
        searchCancellationTokenSource.Cancel();
        searchCancellationTokenSource = new CancellationTokenSource();

        isSearching = true;
        StateHasChanged();

        try
        {
            // Add a small delay to avoid too many operations while typing
            await Task.Delay(300, searchCancellationTokenSource.Token);

            // Client-side filtering for better performance
            if (string.IsNullOrWhiteSpace(searchName))
            {
                skills = allSkills;
            }
            else
            {
                skills = allSkills
                    .Where(s => s.Name.Contains(searchName, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
        }
        catch (OperationCanceledException)
        {
            // Search was cancelled, ignore
        }
        catch (Exception ex)
        {
            errorMessage = $"Error searching skills: {ex.Message}";
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private async Task RefreshSkills()
    {
        await LoadSkills();
    }

    private async Task ClearSearch()
    {
        searchName = "";
        await LoadSkills(); // Reload to get all skills
    }

    private void ClearSearchName()
    {
        searchName = "";
        _ = PerformSearch(); // Fire and forget
    }

    private void ShowAddSkill()
    {
        skillForm = new CreateSkillRequest();
        editingSkill = null;
        duplicateError = "";
        errorMessage = "";
        showModal = true;
    }

    private void EditSkill(SkillDto skill)
    {
        skillForm = new CreateSkillRequest
        {
            Name = skill.Name
        };
        editingSkill = skill;
        duplicateError = "";
        errorMessage = "";
        showModal = true;
    }

    private async Task SaveSkill()
    {
        isLoading = true;
        duplicateError = "";
        errorMessage = "";
        StateHasChanged();

        try
        {
            // Check for duplicates (client-side validation)
            var existingSkill = allSkills.FirstOrDefault(s =>
                s.Name.Equals(skillForm.Name, StringComparison.OrdinalIgnoreCase) &&
                s.Id != editingSkill?.Id);

            if (existingSkill != null)
            {
                duplicateError = $"A skill with the name '{skillForm.Name}' already exists.";
                isLoading = false;
                StateHasChanged();
                return;
            }

            if (editingSkill?.Id > 0)
            {
                var updateRequest = new UpdateSkillRequest
                {
                    Name = skillForm.Name
                };
                await SkillService.UpdateSkillAsync(editingSkill.Id, updateRequest);
            }
            else
            {
                await SkillService.CreateSkillAsync(skillForm);
            }

            CloseModal();
            await LoadSkills(); // Refresh the list
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("already exists", StringComparison.OrdinalIgnoreCase))
            {
                duplicateError = ex.Message;
            }
            else
            {
                errorMessage = $"Error saving skill: {ex.Message}";
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task DeleteSkill(SkillDto skill)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete skill '{skill.Name}'? This action cannot be undone."))
        {
            try
            {
                await SkillService.DeleteSkillAsync(skill.Id);
                await LoadSkills(); // Refresh the list
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting skill: {ex.Message}";
                StateHasChanged();
            }
        }
    }

    private void CloseModal()
    {
        showModal = false;
        skillForm = new CreateSkillRequest();
        duplicateError = "";
        errorMessage = "";
        StateHasChanged();
    }

    public void Dispose()
    {
        searchCancellationTokenSource?.Cancel();
        searchCancellationTokenSource?.Dispose();
    }
}